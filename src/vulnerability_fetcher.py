# Copyright (c)  nexB Inc. and others. All rights reserved.
# http://nexb.com and https://github.com/nexB/vulnerablecode/
# The VulnerableCode software is licensed under the Apache License version 2.0.
# Data generated with VulnerableCode require an acknowledgment.
#
# You may not use this software except in compliance with the License.
# You may obtain a copy of the License at: http://apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
#
# When you publish or redistribute any data created with VulnerableCode or any VulnerableCode
# derivative work, you must accompany this data with the following acknowledgment:
#
#  Generated with VulnerableCode and provided on an 'AS IS' BASIS, WITHOUT WARRANTIES
#  OR CONDITIONS OF ANY KIND, either express or implied. No content created from
#  VulnerableCode should be considered or used as legal advice. Consult an Attorney
#  for any legal advice.
#  VulnerableCode is a free software  from nexB Inc. and others.
#  Visit https://github.com/nexB/vulnerablecode/ for support and download.

# This code is from vulnerablecode's github importer. It is heavily stripped down and 
# modified.

import json
import os

import requests



class GitHubTokenError(Exception):
    pass

# '%s' is interesting, it will have the value '' for the first request,
# since we don't have any value for endCursor at the beginning
# for all the subsequent requests it will have value 'after: "{endCursor}""
query = """
        query{
        securityVulnerabilities(first: 100, ecosystem: PIP, %s) {
            edges {
            node {
                advisory {
                identifiers {
                    type
                    value
                }
                summary
                references {
                    url
                }
                severity
                }
                package {
                name
                }
                vulnerableVersionRange
            }
            }
            pageInfo {
            hasNextPage
            endCursor
            }
        }
        }
        """


def fetch():
    gh_token = os.environ["GH_TOKEN"]
    endpoint = "https://api.github.com/graphql"
    headers = {"Authorization": "token " + gh_token}
    api_data = []
    end_cursor_exp = ""

    while True:
        query_json = {"query": query % (end_cursor_exp)}
        resp = requests.post(endpoint, headers=headers, json=query_json).json()
        if resp.get("message") == "Bad credentials":
            raise GitHubTokenError("Invalid GitHub token")

        end_cursor = resp["data"]["securityVulnerabilities"]["pageInfo"]["endCursor"]
        end_cursor_exp = "after: {}".format('"{}"'.format(end_cursor))
        api_data.append(resp)

        if not resp["data"]["securityVulnerabilities"]["pageInfo"]["hasNextPage"]:
            break

    return api_data

if __name__ == "__main__":
    data = fetch()
    with open("response.json", "w") as f :
        json.dump(data,f,indent=4)
